elasticsearch:
  antiAffinity: hard
  antiAffinityTopologyKey: kubernetes.io/hostname
  clusterHealthCheckParams: wait_for_status=green&timeout=1s
  clusterName: elasticsearch
  enable: true
  esConfig: {}
  esJavaOpts: -Xmx1g -Xms1g
  esMajorVersion: ""
  extraEnvs: []
  extraInitContainers: ""
  extraVolumeMounts: ""
  extraVolumes: ""
  fsGroup: ""
  fullnameOverride: ""
  global: {}
  httpPort: 9200
  image: docker.elastic.co/elasticsearch/elasticsearch
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []
  imageTag: 7.4.0
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - chart-example.local
    path: /
    tls: []
  initResources: {}
  keystore: []
  labels: {}
  lifecycle: {}
  masterService: ""
  masterTerminationFix: false
  maxUnavailable: 1
  minimumMasterNodes: 1
  nameOverride: ""
  networkHost: 0.0.0.0
  nodeAffinity: {}
  nodeGroup: master
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: true
  podAnnotations: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  podSecurityPolicy:
    create: false
    name: ""
    spec:
      fsGroup:
        rule: RunAsAny
      privileged: true
      runAsUser:
        rule: RunAsAny
      seLinux:
        rule: RunAsAny
      supplementalGroups:
        rule: RunAsAny
      volumes:
      - secret
      - configMap
      - persistentVolumeClaim
  priorityClassName: ""
  protocol: http
  rbac:
    create: false
    serviceAccountName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 2Gi
  roles:
    data: "true"
    ingest: "true"
    master: "true"
  schedulerName: ""
  secretMounts: []
  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  service:
    annotations: {}
    httpPortName: http
    nodePort: null
    transportPortName: transport
    type: ClusterIP
  sidecarResources: {}
  sysctlInitContainer:
    enabled: true
  sysctlVmMaxMapCount: 262144
  terminationGracePeriod: 120
  tolerations: []
  transportPort: 9300
  updateStrategy: RollingUpdate
  volumeClaimTemplate:
    storageClassName: "lvm"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10
fluent-bit:
  backend:
    es:
      host: elasticsearch-master
      port: 9200
    forward:
      host: fluentd
      port: 24284
    http:
      format: msgpack
      host: 127.0.0.1
      port: 80
      uri: /
    type: es
  enabled: true
  env: []
  existingConfigMap: ""
  extraVolumeMounts: []
  extraVolumes: []
  filter: {}
  global: {}
  image:
    fluent_bit:
      repository: fluent/fluent-bit
      tag: 0.12.11
    pullPolicy: IfNotPresent
  nodeSelector: {}
  on_minikube: false
  rbac:
    create: true
    serviceAccountName: default
  resources:
    limits:
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi
  tolerations: []
kibana:
  affinity: {}
  antiAffinity: hard
  antiAffinityTopologyKey: kubernetes.io/hostname
  elasticsearchHosts: http://elasticsearch-master:9200
  elasticsearchURL: ""
  enable: true
  extraEnvs: []
  fullnameOverride: ""
  global: {}
  healthCheckPath: /app/kibana
  httpPort: 5601
  image: docker.elastic.co/kibana/kibana
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []
  imageTag: 7.4.0
  ingress:
    annotations: {}
    enabled: true
    hosts: efk.cluster.local
    path: /
    tls: []
  kibanaConfig: {}
  labels: {}
  lifecycle: {}
  maxUnavailable: 1
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1000
  priorityClassName: ""
  protocol: http
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi
  secretMounts: []
  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  serverHost: 0.0.0.0
  service:
    annotations: {}
    nodePort: null
    port: 5601
    type: ClusterIP
  serviceAccount: ""
  tolerations: []
  updateStrategy:
    type: Recreate
